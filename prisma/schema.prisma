// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  url          = env("DATABASE_URL")
  provider     = "mysql"
  // provider = "postgresql"
  relationMode = "prisma"
}

// ----------------------------------------------------------------------------------------------

//                             AUTHENTIFICATION - USER

// ----------------------------------------------------------------------------------------------

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  athlete           Json? // for strava connection

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  MEMBER
  COACH
  MANAGER
  MANAGER_COACH
  ADMIN
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role           @default(MEMBER)
  pricingId       String?
  pricing         Pricing?       @relation(fields: [pricingId], references: [id])
  monthlyPayment  Boolean        @default(false)
  trialUntil      DateTime?
  paiements       Paiement[]
  dueDate         DateTime?
  cancelationDate DateTime?
  documents       UserDocument[]
  phone           String?
  address         String?        @db.Text
  memberData      UserMember?    @relation("member-user")
  coachData       UserCoach?     @relation("coach-user")
  managerData     UserManager?   @relation("manager-user")

  @@index([pricingId])
}

model UserCoach {
  id                 String             @id @default(cuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade, name: "coach-user")
  activityGroups     ActivityGroup[]
  coachingPrices     CoachingPrice[]
  coachingActivities Activity[]
  searchAddress      String?
  latitude           Float              @default(48.8583701)
  longitude          Float              @default(2.2944813)
  range              Float              @default(10)
  facebookLink       String?
  twitterLink        String?
  youtubeLink        String?
  instagramLink      String?
  certifications     Certification[]
  rating             Float              @default(0)
  pageStyle          String             @default("light")
  page               Page?
  planningActivities PlanningActivity[]
  plannings          Planning[]
  clubs              Club[]             @relation("coach-club")

  @@index([userId])
}

model UserMember {
  id                    String         @id @default(cuid())
  userId                String         @unique
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade, name: "member-user")
  clubs                 Club[]         @relation("member-club")
  subscriptions         Subscription[]
  inscriptionFeeOffered Boolean        @default(false)
  cancelationFeeOffered Boolean        @default(false)
  subscriptionStart     DateTime?
}

model UserManager {
  id           String @id @default(cuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "manager-user")
  managedClubs Club[] @relation("manager-club")
}

model Paiement {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  amount         Float
  paiementDate   DateTime

  @@index([userId])
  @@index([subscriptionId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserDocumentType {
  DOCUMENT
  IMAGE
  PROFILE_IMAGE
  PAGE_IMAGE
  CERTIFICATION
  MEDICAL_CERTIFICAT
}

model UserDocument {
  id                 String               @id @default(cuid())
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  documentType       UserDocumentType     @default(DOCUMENT)
  fileType           String
  fileName           String?
  certification      Certification?
  pageSectionElement PageSectionElement[]
  club               Club?

  @@index([userId])
}

// ----------------------------------------------------------------------------------------------

//                             CLUB MANAGEMENT

// ----------------------------------------------------------------------------------------------

model Club {
  id            String            @id @default(cuid())
  name          String
  address       String            @db.Text
  managerId     String
  manager       UserManager       @relation(fields: [managerId], references: [id], onDelete: Cascade, name: "manager-club")
  sites         Site[]
  activities    Activity[]
  members       UserMember[]      @relation("member-club")
  coachs        UserCoach[]       @relation("coach-club")
  calendars     OpeningCalendar[]
  pages         Page[]
  pageStyle     String            @default("light")
  searchAddress String?
  latitude      Float             @default(48.8583701)
  longitude     Float             @default(2.2944813)
  plannings     Planning[]
  logoId        String?           @unique
  logo          UserDocument?     @relation(fields: [logoId], references: [id])
  subscriptions Subscription[]

  @@index([managerId])
  @@index([logoId])
}

model Site {
  id                 String             @id @default(cuid())
  name               String
  address            String             @db.Text
  searchAddress      String?
  latitude           Float              @default(48.8583701)
  longitude          Float              @default(2.2944813)
  clubId             String
  club               Club               @relation(fields: [clubId], references: [id], onDelete: Cascade)
  rooms              Room[]
  openWithClub       Boolean            @default(true)
  calendars          OpeningCalendar[]
  plannings          Planning[]
  planningActivities PlanningActivity[]
  subscriptions      Subscription[]
  activity           Activity[]

  @@index([clubId])
}

enum RoomReservation {
  NONE
  POSSIBLE
  MANDATORY
}

model Room {
  id                 String             @id @default(cuid())
  name               String
  reservation        RoomReservation    @default(NONE)
  capacity           Int
  unavailable        Boolean            @default(false)
  openWithClub       Boolean            @default(true)
  openWithSite       Boolean            @default(true)
  calendars          OpeningCalendar[]
  siteId             String
  site               Site               @relation(fields: [siteId], references: [id], onDelete: Cascade)
  // room possible affectation for activity
  activities         Activity[]         @relation("rooms-activities")
  plannings          Planning[]
  planningActivities PlanningActivity[]
  subscriptions      Subscription[]
  // room for activities with no calendar
  activity           Activity[]         @relation("room-activity") // room for activity 

  @@index([siteId])
}

enum SubscriptionMode {
  ALL_INCLUSIVE
  ACTIVITY_GROUP
  ACTIVITY
  DAY
  COURSE
}

enum SubscriptionRestriction {
  CLUB
  SITE
  ROOM
}

model Subscription {
  id              String                  @id @default(cuid())
  name            String
  mode            SubscriptionMode        @default(ALL_INCLUSIVE)
  restriction     SubscriptionRestriction @default(CLUB)
  highlight       String
  description     String                  @db.Text
  startDate       DateTime
  deletionDate    DateTime?
  monthly         Float                   @default(0)
  yearly          Float                   @default(0)
  cancelationFee  Float                   @default(0)
  inscriptionFee  Float                   @default(0)
  activitieGroups ActivityGroup[]
  activities      Activity[]
  day             DayName?
  users           UserMember[]
  clubId          String
  club            Club                    @relation(fields: [clubId], references: [id], onUpdate: NoAction)
  sites           Site[]
  rooms           Room[]
  paiements       Paiement[]

  @@index([clubId])
}

enum CoachingLevelList {
  ALL
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  COMPETITOR
  PROFESSIONAL
}

model CoachingLevel {
  id      String            @id @default(cuid())
  offerId String
  offer   CoachingPrice     @relation(fields: [offerId], references: [id], onDelete: Cascade)
  level   CoachingLevelList

  @@index([offerId])
}

enum CoachingTarget {
  INDIVIDUAL
  COMPANY
}

model CoachingPrice {
  id              String              @id @default(cuid())
  name            String
  target          CoachingTarget      @default(INDIVIDUAL)
  coachingLevel   CoachingLevel[]
  excludingTaxes  Boolean             @default(false)
  description     String              @db.Text
  startDate       DateTime
  physical        Boolean
  inHouse         Boolean
  publicPlace     Boolean
  perHourPhysical Float               @default(0)
  perDayPhysical  Float               @default(0)
  travelFee       Float               @default(0)
  travelLimit     Int                 @default(0)
  webcam          Boolean
  perHourWebcam   Float               @default(0)
  perDayWebcam    Float               @default(0)
  freeHours       Int                 @default(0)
  coachId         String
  coach           UserCoach           @relation(fields: [coachId], references: [userId], onDelete: Cascade)
  packs           CoachingPricePack[]

  @@index([coachId])
}

model CoachingPricePack {
  id              String        @id @default(cuid())
  nbHours         Int           @default(1)
  packPrice       Float         @default(0)
  coachingPriceId String
  coachingPrice   CoachingPrice @relation(fields: [coachingPriceId], references: [id], onDelete: Cascade)

  @@index([coachingPriceId])
}

// ----------------------------------------------------------------------------------------------

//                             ACTIVITIES

// ----------------------------------------------------------------------------------------------

model ActivityGroup {
  id                   String                @id @default(cuid())
  name                 String
  default              Boolean               @default(false)
  activities           Activity[]
  coach                UserCoach?            @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId              String?
  certifications       Certification[]
  certificationModules CertificationModule[]
  subscriptions        Subscription[]

  @@index([coachId])
}

model Activity {
  id                 String             @id @default(cuid())
  name               String
  groupId            String
  group              ActivityGroup      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  clubId             String
  club               Club               @relation(fields: [clubId], references: [id], onDelete: Cascade)
  rooms              Room[]             @relation(name: "rooms-activities")
  planningActivities PlanningActivity[]
  subscriptions      Subscription[]
  noCalendar         Boolean            @default(false)
  siteId             String?
  site               Site?              @relation(fields: [siteId], references: [id])
  // for activities with no calendar
  roomId             String?
  room               Room?              @relation(fields: [roomId], references: [id], name: "room-activity")
  coachs             UserCoach[]

  @@index([roomId])
  @@index([groupId])
  @@index([clubId])
  @@index([siteId])
}

model OpeningCalendar {
  id          String           @id @default(cuid())
  startDate   DateTime         @default(now())
  openingTime DayOpeningTime[]
  rooms       Room[]
  clubs       Club[]
  sites       Site[]
}

enum DayName {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model DayOpeningTime {
  id           String            @id @default(cuid())
  name         DayName
  wholeDay     Boolean           @default(false)
  closed       Boolean           @default(false)
  workingHours OpeningTime[]
  calendar     OpeningCalendar[]
}

model OpeningTime {
  id      String           @id @default(cuid())
  opening String // format HH:MM
  closing String // format HH:MM
  day     DayOpeningTime[]
}

// ----------------------------------------------------------------------------------------------

//                             PRICING

// ----------------------------------------------------------------------------------------------

model Pricing {
  id           String          @id @default(cuid())
  roleTarget   Role
  title        String
  description  String          @db.Text
  free         Boolean?        @default(false)
  highlighted  Boolean?        @default(false)
  monthly      Float?          @default(0)
  yearly       Float?          @default(0)
  options      PricingOption[]
  deleted      Boolean?        @default(false)
  deletionDate DateTime?
  users        User[]
}

model PricingOption {
  id        String  @id @default(cuid())
  name      String  @db.Text
  weight    Int // for sorting
  pricingId String
  pricing   Pricing @relation(fields: [pricingId], references: [id], onDelete: Cascade)

  @@index([pricingId])
}

// ----------------------------------------------------------------------------------------------

//                             CERTIFICATION

// ----------------------------------------------------------------------------------------------

model CertificationGroup {
  id      String                @id @default(cuid())
  name    String
  modules CertificationModule[]
}

model CertificationModule {
  id                   String             @id @default(cuid())
  name                 String
  certificationGroupId String
  certificationGroup   CertificationGroup @relation(fields: [certificationGroupId], references: [id], onDelete: Cascade)
  activityGroups       ActivityGroup[]
  certifications       Certification[]

  @@index([certificationGroupId])
}

model Certification {
  id             String                @id @default(cuid())
  name           String
  obtainedIn     DateTime
  documentId     String?               @unique
  document       UserDocument?         @relation(fields: [documentId], references: [id])
  coach          UserCoach             @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId        String
  modules        CertificationModule[]
  activityGroups ActivityGroup[]
  manualModule   String?

  @@index([coachId])
}

// ----------------------------------------------------------------------------------------------

//                             PAGES

// ----------------------------------------------------------------------------------------------

enum PageTarget {
  HOME
  PRESENTATION
  ACTIVITIES
  ACTIVITY
  TEAM
  PLANNING
  PLANS
  CONTACT
  VIDEOS
}

enum PageSectionModel {
  HERO
  ACTIVITY_GROUPS
  ACTIVITIES
  LOCATION
  SOCIAL
  FEATURES
  CONTACT
  FOOTER
}

enum PageSectionElementType {
  HERO_CONTENT
  CTA
  CARD
  OPENING_TIME
  MAP
  FEATURE
  BUTTON
  NEWSLETTER
  OPTION
}

model PageSectionElement {
  id          String                  @id @default(cuid())
  images      UserDocument[]
  title       String?
  subTitle    String?
  elementType PageSectionElementType?
  content     String?                 @db.Text
  link        String?
  pageId      String?
  pageSection PageSectionModel?
  sectionId   String
  section     PageSection             @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  optionValue String?

  @@index([sectionId])
}

model PageSection {
  id       String               @id @default(cuid())
  model    PageSectionModel
  elements PageSectionElement[]
  pageId   String
  page     Page                 @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
}

model Page {
  id        String        @id @default(cuid())
  name      String
  target    PageTarget    @default(HOME)
  sections  PageSection[]
  clubId    String?
  club      Club?         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  coachId   String?       @unique
  coach     UserCoach?    @relation(fields: [coachId], references: [userId], onDelete: Cascade)
  published Boolean       @default(false)

  @@index([clubId])
  @@index([coachId])
}

// ----------------------------------------------------------------------------------------------

//                             PLANNING

// ----------------------------------------------------------------------------------------------

model Planning {
  id                 String             @id @default(cuid())
  name               String?
  clubId             String
  club               Club               @relation(fields: [clubId], references: [id], onDelete: Cascade)
  siteId             String?
  site               Site?              @relation(fields: [siteId], references: [id])
  roomId             String?
  room               Room?              @relation(fields: [roomId], references: [id])
  startDate          DateTime           @default(now())
  endDate            DateTime?
  planningActivities PlanningActivity[]
  coachId            String?
  coach              UserCoach?         @relation(fields: [coachId], references: [userId])

  @@index([clubId])
  @@index([siteId])
  @@index([roomId])
  @@index([coachId])
}

model PlanningActivity {
  id         String     @id @default(cuid())
  planningId String
  planning   Planning   @relation(fields: [planningId], references: [id], onDelete: Cascade)
  activityId String
  activity   Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  siteId     String
  site       Site       @relation(fields: [siteId], references: [id])
  roomId     String?
  room       Room?      @relation(fields: [roomId], references: [id])
  day        DayName
  startTime  String
  duration   Int
  coachId    String?
  coach      UserCoach? @relation(fields: [coachId], references: [userId])

  @@index([planningId])
  @@index([activityId])
  @@index([siteId])
  @@index([roomId])
  @@index([coachId])
}
