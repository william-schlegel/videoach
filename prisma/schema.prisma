// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  url          = env("DATABASE_URL")
  provider     = "mysql"
  // provider = "postgresql"
  relationMode = "prisma"
}

// datasource db {
//   provider = "sqlite"
//   // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//   // Further reading:
//   // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//   // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//   url      = env("DATABASE_URL")
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  MEMBER
  COACH
  MANAGER
  MANAGER_COACH
  ADMIN
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  activityGroups      ActivityGroup[]
  managedClubs        Club[]               @relation("Manager")
  clubs               Club[]               @relation("Member")
  role                Role                 @default(MEMBER)
  certificationGroups CertificationGroup[]
  certifications      Certification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id         String            @id @default(cuid())
  name       String
  address    String
  managerId  String
  manager    User              @relation(fields: [managerId], references: [id], onDelete: Cascade, name: "Manager")
  sites      Site[]
  activities Activity[]
  members    User[]            @relation(name: "Member")
  calendars  OpeningCalendar[]

  @@index([managerId])
}

model Site {
  id           String            @id @default(cuid())
  name         String
  address      String
  clubId       String
  club         Club              @relation(fields: [clubId], references: [id], onDelete: Cascade)
  rooms        Room[]
  openWithClub Boolean           @default(true)
  calendars    OpeningCalendar[]

  @@index([clubId])
}

enum RoomReservation {
  NONE
  POSSIBLE
  MANDATORY
}

model Room {
  id           String            @id @default(cuid())
  name         String
  reservation  RoomReservation   @default(NONE)
  capacity     Int
  unavailable  Boolean           @default(false)
  openWithClub Boolean           @default(true)
  openWithSite Boolean           @default(true)
  calendars    OpeningCalendar[]
  siteId       String
  site         Site              @relation(fields: [siteId], references: [id], onDelete: Cascade)
  activities   Activity[]

  @@index([siteId])
}

// activity group may be standard (default group) or belong to a specific user
model ActivityGroup {
  id             String          @id @default(cuid())
  name           String
  default        Boolean         @default(false)
  activities     Activity[]
  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  certifications Certification[]

  @@index([userId])
}

model Activity {
  id                   String              @id @default(cuid())
  name                 String
  groupId              String
  group                ActivityGroup       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  clubId               String
  club                 Club                @relation(fields: [clubId], references: [id], onDelete: Cascade)
  rooms                Room[]
  certificationGroupId String?
  certificationGroup   CertificationGroup? @relation(fields: [certificationGroupId], references: [id])

  @@index([groupId])
  @@index([clubId])
  @@index([certificationGroupId])
}

model OpeningCalendar {
  id          String           @id @default(cuid())
  startDate   DateTime         @default(now())
  openingTime DayOpeningTime[]
  rooms       Room[]
  clubs       Club[]
  sites       Site[]
}

enum DayName {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model DayOpeningTime {
  id           String            @id @default(cuid())
  name         DayName
  wholeDay     Boolean           @default(false)
  closed       Boolean           @default(false)
  workingHours OpeningTime[]
  calendar     OpeningCalendar[]
}

model OpeningTime {
  id      String           @id @default(cuid())
  opening String // format HH:MM
  closing String // format HH:MM
  day     DayOpeningTime[]
}

model Pricing {
  id          String          @id @default(cuid())
  roleTarget  Role
  title       String
  description String
  free        Boolean?        @default(false)
  highlighted Boolean?        @default(false)
  monthly     Float?          @default(0)
  yearly      Float?          @default(0)
  options     PricingOption[]
}

model PricingOption {
  id        String  @id @default(cuid())
  name      String
  weight    Int // for sorting
  pricingId String
  pricing   Pricing @relation(fields: [pricingId], references: [id], onDelete: Cascade)

  @@index([pricingId])
}

model CertificationGroup {
  id             String                @id @default(cuid())
  name           String
  default        Boolean               @default(false)
  user           User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  certifications Certification[]
  activities     Activity[]
  hasModules     Boolean               @default(false)
  modules        CertificationModule[]

  @@index([userId])
}

model Certification {
  id                   String                @id @default(cuid())
  name                 String
  certificationGroupId String
  certificationGroup   CertificationGroup    @relation(fields: [certificationGroupId], references: [id])
  obtainedIn           DateTime
  documentUrl          String?
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  activityGroupId      String?
  activityGroup        ActivityGroup?        @relation(fields: [activityGroupId], references: [id])
  modules              CertificationModule[]

  @@index([userId])
  @@index([activityGroupId])
  @@index([certificationGroupId])
}

model CertificationModule {
  id                   String             @id @default(cuid())
  name                 String
  certificationId      String?
  certification        Certification?     @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  obtainedIn           DateTime?
  documentUrl          String?
  certificationGroupId String
  certificationGroup   CertificationGroup @relation(fields: [certificationGroupId], references: [id], onDelete: Cascade)

  @@index([certificationId])
  @@index([certificationGroupId])
}
